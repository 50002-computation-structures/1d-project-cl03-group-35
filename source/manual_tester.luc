module manual_tester (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    input select_button[1],
    input start_button[1],
    input row[4],
    output col[4],
    output led_grid[16],
    output ledout [16],
    output io_segment[7],
    output seg_selector[4]
) {


    enum States{ IDLE,SETUP,SELECT_GAME,LOAD,LOAD_INCREASE,LOAD_ADVANCE,LOAD_CHECK,SELECT_LEVEL,LOAD_MAP_TO_3,
        LOAD_MAP_TO_4,PLAYER_INPUT,ADD_LEVEL_TO_ROM_SEL,RESET,UPDATE,GAMEOVER,CHECK,LOAD_IN,LOAD_COUNTER,LEVEL_ADVANCE,CHECK_LEVEL,
    PRE_SELECT,MAP_SELECTOR,INCRESE_ROMSEL_BY_3}
    .clk(clk) {
             
        button_map button_map(.rst(rst))
        dff input_buffer[8]
        dff gamemode 
        dff state[$width(States)](#INIT(States.IDLE))
        dff led[8]
        
        simple_ram reg
        
        multi_seven_seg seg(#DIV(4),.rst(rst)) 
        multi_word_seg word_seg(#DIV(4),.rst(rst)) 
    }
    
    alu alu
    cu control_unit 
    instruction_ROM iROM
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        led.d =led.q
        ledout =reg.z
        // i/o
        col = button_map.col 
        button_map.row  = row
        led_grid = reg.button_led
        decimal_renderer.value = reg.count_min[13:0]
        word_seg.values = c{{4hf},{4hf},{4hf},{4hf}}
        seg.values = decimal_renderer.digits 
        io_segment = ~seg.seg
        seg_selector = ~seg.sel 
        

        // control_unit
        control_unit.opcode = iROM.out[31:26]
        
        //Registry 
        reg.ra1 = iROM.out[20:16]
        reg.ra2 = iROM.out[15:11]
        reg.rc = iROM.out[25:21]
        reg.write_data = alu.out
        reg.write_enable = control_unit.we
        
        
        //ALU
        alu.alufn = control_unit.alufn
        alu.a = reg.rd1
        case(control_unit.bsel){
            b1:
            alu.b=reg.rd2
            b0:
            alu.b = iROM.out[15:0]
            default:
            alu.b = iROM.out[15:0] 
        }
        //Instruction ROM
        input_buffer.d =input_buffer.q
        iROM.address = input_buffer.q

        
        // State Machines
        state.d = state.q
        gamemode.d=gamemode.q
        case(state.q){
            States.IDLE:
            state.d = States.SELECT_GAME
            States.SELECT_GAME:
            word_seg.values  = c{{4hf},{4hf},{4hf},{c{3b0,gamemode.q}}} // DISPLAY E OR H  depending on gamemode
            io_segment = ~word_seg.seg
            seg_selector = ~word_seg.sel 
            if (select_button){
                   gamemode.d = gamemode.q ^ 1 
                    
                }
            if(start_button){
                  iROM.address = gamemode.q +1
                  state.d = States.SETUP  
                }
           States.SETUP:
           iROM.address =  3
           state.d = States.LOAD
           States.LOAD: 
            
            iROM.address =  reg.rom_sel  
            state.d = States.LOAD_INCREASE 
                

           States.LOAD_INCREASE:
            iROM.address = 5// add 1 to TEMP
            state.d = States.LOAD_ADVANCE   
              
           States.LOAD_CHECK:
            iROM.address = 6 // CHECK if TEMP <15
            state.d = States.LOAD_ADVANCE
            
           States.LOAD_ADVANCE: 
                          
            if (reg.temp < 17){ // if z = 1 , have not complete loading
             state.d = States.LOAD
            iROM.address =4  //ADD 1 to ROM
                }
            else{
            state.d = States.SELECT_LEVEL 
                }
           States.SELECT_LEVEL:
           
           seg.values  = c{{4hf},{c{hf}},{reg.level_select[7:4]},{reg.level_select[3:0]}} //display difficulty level
           
             if (select_button){
             iROM.address = 8 // ADD  1 to level select
             state.d = States.PRE_SELECT
                }
            if(start_button){
            state.d =States.ADD_LEVEL_TO_ROM_SEL
                }  
            
            
            States.PRE_SELECT:
            iROM.address = 9// CMPLEC if LEVEL SELECT <3
 
            state.d = States.LEVEL_ADVANCE
            
            States.LEVEL_ADVANCE:
            
            if (reg.z== 0){
                  iROM.address = 10 // -4  RESET REG[7] SUBC 4
                }
            
            state.d = States.SELECT_LEVEL    
            
          
            States.ADD_LEVEL_TO_ROM_SEL:
            iROM.address = 11 // ADD LEVEL SEL to ROM SEL
            state.d = States.LOAD_MAP_TO_3
                
           States.LOAD_MAP_TO_3:    
            iROM.address = reg.rom_sel // ADD MAP TO REG[3]
            state.d = States.LOAD_MAP_TO_4         

            
            States.LOAD_MAP_TO_4:
             iROM.address = 12 // LOAD REG  3 to REG 4
            state.d = States.INCRESE_ROMSEL_BY_3  
            
          States.INCRESE_ROMSEL_BY_3:
                iROM.address = 13// ADD LEVEL SEL to ROM SEL
            state.d = States.LOAD_COUNTER 
            States.LOAD_COUNTER:
             iROM.address = reg.rom_sel// ADD LEVEL SEL to ROM SEL
            state.d = States.PLAYER_INPUT 
            
           States.PLAYER_INPUT:
           iROM.address = 15
  
            if(|button_map.out[3:0]){
            led.d = reg.z
                state.d = States.UPDATE  
                
                }
            if (select_button){
                    state.d = States.LOAD_MAP_TO_4
                }
            case(button_map.out){      
                b00010001:
                    iROM.address = 16
                b00100001:
                    iROM.address = 17  
                b01000001:
                    iROM.address =   18   
                b10000001:
                    iROM.address = 19 
                b00010010:
                    iROM.address = 20   
                b00100010:
                    iROM.address = 21
                b01000010:
                    iROM.address = 22           
                b10000010:
                    iROM.address = 23   
                b00010100:
                    iROM.address = 24
                b00100100:
                    iROM.address = 25
                b01000100:
                    iROM.address = 26  
                b10000100:
                    iROM.address = 27
                b00011000:
                    iROM.address = 28
                b00101000:
                    iROM.address = 29    
                b01001000:
                    iROM.address = 30
                b10001000:
                    iROM.address = 31

                    }

               States.UPDATE:
                iROM.address = 14
               state.d = States.PLAYER_INPUT  
            States.GAMEOVER :
                iROM.address = 15 
                state.d = States.SELECT_GAME     
        
            
        }
        }
    }
