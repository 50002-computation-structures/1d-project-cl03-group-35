module manual_tester (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    input select_button[1],
    input start_button[1],
    input row[4],
    output col[4],
    output led_grid[16],
    output ledout [16],
    output io_segment[7],
    output seg_selector[4]
) {


    enum States{ IDLE,SELECT_GAME,LOAD,LOAD_INCREASE,LOAD_ADVANCE,LOAD_CHECK,SELECT_LEVEL,LOAD_MAP_TO_3,
        LOAD_MAP_TO_4,PLAYER_INPUT,RESET,UPDATE,GAMEOVER,CHECK,LOAD_IN,LOAD_COUNTER,LEVEL_ADVANCE,CHECK_LEVEL}
    .clk(clk) {
             
        button_map button_map(.rst(rst))
        dff input_buffer[8]
        dff gamemode 
        dff state[$width(States)](#INIT(States.IDLE))
        dff led[8]
        simple_ram reg
        
        multi_seven_seg seg(#DIV(4),.rst(rst)) 
        multi_word_seg word_seg(#DIV(4),.rst(rst)) 
    }
    
    alu alu
    cu control_unit 
    instruction_ROM iROM
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        led.d =led.q
        ledout =reg.z
        // i/o
        col = button_map.col 
        button_map.row  = row
        led_grid = reg.button_led
        decimal_renderer.value = reg.count_min[13:0]
        word_seg.values = c{{4hf},{4hf},{4hf},{4hf}}
        seg.values = decimal_renderer.digits 
        io_segment = ~seg.seg
        seg_selector = ~seg.sel 
        
        
        // control_unit
        control_unit.opcode = iROM.out[31:26]
        
        //Registry 
        reg.ra1 = iROM.out[20:16]
        reg.ra2 = iROM.out[15:11]
        reg.rc = iROM.out[25:21]
        reg.write_data = alu.out
        reg.write_enable = control_unit.we
        
        
        //ALU
        alu.alufn = control_unit.alufn
        alu.a = reg.rd1
        case(control_unit.bsel){
            b1:
            alu.b=reg.rd2
            b0:
            alu.b = iROM.out[15:0]
            default:
            alu.b = iROM.out[15:0] 
        }
        //Instruction ROM
        input_buffer.d =input_buffer.q
        iROM.address = input_buffer.q

        
        // State Machines
        state.d = state.q
        gamemode.d=gamemode.q
        case(state.q){
            States.IDLE:
            state.d = States.SELECT_GAME
            States.SELECT_GAME:
            word_seg.values  = c{{4hf},{4hf},{4hf},{c{3b0,gamemode.q}}} // DISPLAY E OR H  depending on gamemode
            io_segment = ~word_seg.seg
        seg_selector = ~word_seg.sel 
            if (select_button){
                   gamemode.d = gamemode.q ^ 1 

                }
            if(start_button){
                  iROM.address = gamemode.q 
                  state.d = States.LOAD  
                  
                }
           States.LOAD:
             iROM.address =  reg.rom_sel  
            state.d = States.LOAD_INCREASE
           States.LOAD_INCREASE:
             iROM.address = 36// add 1 to reg[7]
            state.d = States.LOAD_CHECK
           States.LOAD_CHECK:
            iROM.address = 37 // CHECK if reg[7]<16
            state.d = States.LOAD_ADVANCE
           States.LOAD_ADVANCE:     
            if (~reg.z){ // if z = 1 , have not complete loading
             state.d = States.SELECT_LEVEL
            iROM.address = 39
                }else{
            iROM.address = 2 // blank
            state.d = States.LOAD 
                }
           States.SELECT_LEVEL:
           iROM.address = 65 
            seg.values  = c{{4hf},{4hf},{reg.level_select[7:4]},{reg.level_select[3:0]}} //display difficulty level
            led.d = reg.z
              if (select_button){
                  iROM.address = 63 // ADD  1 to level select
                  state.d = States.LEVEL_ADVANCE 
                }
            if(start_button){
             iROM.address = 64 // -4                   
                }  

            States.LEVEL_ADVANCE:
             led.d = reg.z
                iROM.address = 2 // blank
             if (~reg.z){ // if z = 1 , level select <3
            iROM.address = 64 // reset to 0
                }
            
            state.d = States.SELECT_LEVEL 
                
            
           States.LOAD_MAP_TO_3:
                iROM.address = 41 // ADDC to REG[3]
            state.d = States.LOAD_MAP_TO_4 
            States.LOAD_MAP_TO_4:
             iROM.address = 44 // ADD REG3 to REG 4
                
            state.d = States.LOAD_COUNTER  
            States.LOAD_COUNTER:
             iROM.address = 61 // ADD Min move to Reg 5
            state.d = States.PLAYER_INPUT 
           States.PLAYER_INPUT:
            ledout  = reg.count_min[7:0]
            if(|button_map.out[3:0]){
                state.d = States.UPDATE   
                }
        
            case(button_map.out){      
                b00010001:
                    iROM.address = 45
                    led.d = 45
                b00100001:
                    iROM.address = 46
                    led.d = 46
                b01000001:
                    iROM.address = 47
                    led.d = 47
                b10000001:
                    iROM.address = 48
                    led.d = 48
                b00010010:
                    iROM.address = 49
                    led.d = 49
                b00100010:
                    iROM.address = 50
                    led.d = 50
                b01000010:
                    iROM.address = 51
                    led.d = 51
                b10000010:
                    iROM.address = 52
                    led.d = 52
                b00010100:
                    iROM.address = 53
                    led.d = 53
                b00100100:
                    iROM.address = 54
                    led.d = 54
                b01000100:
                    iROM.address = 55
                    led.d = 55
                b10000100:
                    iROM.address = 56
                    led.d = 56
                b00011000:
                    iROM.address = 57
                    led.d = 57
                b00101000:
                    iROM.address = 58
                    led.d = 58
                b01001000:
                    iROM.address = 59
                    led.d = 59
                b10001000:
                    iROM.address = 60
                    led.d = 60
                default:
                led.d = led.q
                    }
               States.UPDATE:
                led.d = 62
                iROM.address = 62
               state.d = States.PLAYER_INPUT   
            States.CHECK  :
                iROM.address = 62       
            
        }
        }
    }
