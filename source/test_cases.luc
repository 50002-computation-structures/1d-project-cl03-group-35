module test_cases (
    input test_case[8],  
    output b[32],
    output a[32],
    output alufn[6],
    output ans[32]
) {
    const A = {
        32b00000000000000000000000000010001,//1. Zero Addition: A + 0 to ensure correct handling of zero
        32b00000000000000000000000000010001,//2. Positive Numbers: Add two positive numbers.
        32b01111111111111111111111111111111,//3. Boundary Values: Add the maximum positive number to itself and ensure correct handling of overflow.
        32b01111111111111111111111111111111,//4. Check for overflow by adding two very big positive numbers
        32b00000000000000000001000100010001,//5.Zero Subtraction: A - 0  to test for correct subtraction with zero.
        32b00000000000000000001000100010001,//6. Positive Numbers: Minus two positive numbers.
        32b10000000000000000000000000000000,//7.Underflow: Subtract a larger number from a smaller one to test for underflow.
        32b00000000000000000000000000000000,//8. Boundary Values: Subtract the maximum positive number from zero and check for correct negative result in two’s complement
        32b00000000000000000000000000000000,//9.Zero Multiplication: Multiply by 0 to ensure the result is 0.
        32b00000000000000000000001010010101,//10.Multiplication by One: A * 1 should yield A.
        32b00000000000000000000001010010101,//11.Positive Numbers: Multiply two positive numbers and check for correct results.
        32b00000000000000000000001010010101,//12.All Ones: A AND 0xFFFF (assuming 16-bit operands) should be A.
        32b00000000000000000000001010010101,//13.All Zero: A AND 0x0000 (assuming 16-bit operands) should be 0.
        32b00010001000100000000001010010101,//14.Identity Check: A AND A should give A.
        32b00010001000100000000001010010101,//15.Complement Check: A AND NOT A should give 0.
        32b00010001000100000000001010010101,//16. All Zeros : A OR 0 should be A
        32b00010001000100000000001010010101,//17. All Ones : A OR FFFF should be FFFF
        32b00010001000100000000001010010101,//18. Identity Check: A OR A should give A.
        32b00010001000100010001000100010001,//19.Identity Check: A XOR 0 should give A,
        32b00010001000100010001000100010001,//20.Identity Check: A XOR A should give 0.
        32b00010001000100010001000100010001,//21.Complement Check: A XOR NOT A should give 0xFFFF.
        32b00010001000100010001000100010001,//22.Load Function: Ensure that inputting A gives A, and does not modify it.
        32b00010000000000010000000000010001,//23.SHL Zero Shift: Shifting A by 0 should yield A.
        32b00010000000000010000000000010001,//24.SHL Maximum Shift: Shifting a number by the width of the data bus minus one.
        32b00010000000000010000000000010001,//25.SHL Boundary Cases: Shift a number with a 1 in the MSB and ensure it is handled correctly.
        32b10010000000000010000000000010001,//26.SHR Zero Shift: Shifting A by 0 should yield A.
        32b10010000000000010000000000010001,//27.SHR Maximum Shift: Shifting a number by the width of the data bus minus one.
        32b10010000000000010000000000010001,//28.SHR Logical Shift: Ensure that the vacated bits are filled with 0.
        32b10010000000000010000000000010001,//29.SRA Arithmetic Right Shift: Ensure the sign bit is replicated to preserve the sign of the number.
        32b00001100000000001110000000011111,//30. CMPEQ Test with equal values to ensure the result is true. 
        32b00001100000000001110000000011111,//31. CMPEQ Inequality: Test with different values to ensure the result is false.
        32b00001100000000001110000000011110,//32. CMPLT Less Than: Test where A is less than B
        32b00001100000000001110000000111111,//33. CMPLT Greater Than or Equal: Test where A is greater than or equal to B to ensure the result is false.
        32b00001100000000001110000000011111,//34. CMPLE Less Than or Equal: Test where A is less than or equal to B.
        32b00001100000000001110000000111111,//35. CMPLE Greater Than: Test where A is greater than B to ensure the result is false.
        32b00010001000100010001000100010001,//36. Load value in address 0
        32b00100010001000100010001000100010,//37. Store value in address 0
        32b00100010001000100010001000100010 //38. Load empty address
        
    
    }
    const B = {
        32b00000000000000000000000000000000,//1.Zero Addition: A + 0 and 0 + A to ensure correct handling of zero
        32b00000000000000000000000000010001,//2. Positive Numbers: Add two positive numbers.
        32b00000000000000000000000000000001,//3. Boundary Values: Add the maximum positive number to itself and ensure correct handling of overflow.
        32b01111111111111111111111111111111,//4. Check for overflow by adding two very big positive numbers
        32b00000000000000000000000000000000,//5.Zero Subtraction: A - 0  to test for correct subtraction with zero.
        32b00000000000000000001000100010001,//6. Positive Numbers: Minus two positive numbers.
        32b01111111111111111111111111111111,//7.Underflow: Subtract a larger number from a smaller one to test for underflow.
        32b01111111111111111111111111111111,//8. Boundary Values: Subtract the maximum positive number from zero and check for correct negative result in two’s complement
        32b00000000000000000000000000000000,//9.Zero Multiplication: Multiply by 0 to ensure the result is 0.
        32b00000000000000000000000000000001,//10.Multiplication by One: A * 1 should yield A.
        32b00000000000000000000001010010101,//11.Positive Numbers: Multiply two positive numbers and check for correct results.
        32b11111111111111111111111111111111,//12.AND All Ones: A AND 0xFFFF (assuming 16-bit operands) should be A.
        32b00000000000000000000000000000000,//13.AND All Zero: A AND 0x0  000 (assuming 16-bit operands) should be 0.
        32b00010001000100000000001010010101,//14. Identity Check: A AND A should give A.
        ~32b00010001000100000000001010010101,//15.Complement Check: A AND NOT A should give 0.
        32b00000000000000000000000000000000,//16. All Zeros : A OR 0 should be A
        32b11111111111111111111111111111111,//17. All Ones : A OR FFFF should be A
        32b00010001000100000000001010010101,//18. Identity Check: A OR A should give A.
        32b00000000000000000000000000000000,//19.Identity Check: A XOR 0 should give A,
        32b00010001000100010001000100010001,//20.Identity Check: A XOR A should give 0.
         ~32b00010001000100010001000100010001,//21.Complement Check: A XOR NOT A should give 0xFFFF.
        32b00010001000100010001000100010001,//22.Load Function: Ensure that inputting A gives A, and does
        32b00000000000000000000000000000000,//23.SHL Zero Shift: Shifting A by 0 should yield A.
        32b00000000000000000000000000011111,//24.SHL Maximum Shift: Shifting a number by the width of the data bus minus one.
        32b00000000000000000000000000011111,//25.SHL Boundary Cases: Shift a number with a 1 in the MSB and ensure it is handled correctly.
        32b00000000000000000000000000000000,//26.SHR Zero Shift: Shifting A by 0 should yield A.
        32b00000000000000000000000000011111,//27.SHR Maximum Shift: Shifting a number by the width of the data bus minus one.
        32b00000000000000000000000000010111,//28.SHR Logical Shift: Ensure that the vacated bits are filled with 0.
        32b00000000000000000000000000011111,//29. SRA Arithmetic Right Shift: Ensure the sign bit is replicated to preserve the sign of the number.
        32b00001100000000001110000000011111,//30. CMPEQ Test with equal values to ensure the result is true. 
        32b00001100000000001110000000011110,//31. CMPEQ Inequality: Test with different values to ensure the result is false.
        32b00001100000000001110000000011111,//32. CMPLT Less Than: Test where A is less than B
        32b00001100000000001110000000011111,//33. CMPLT Greater Than or Equal: Test where A is greater than or equal to B to ensure the result is false.
        32b00001100000000001110000000011111,//34. CMPLE Less Than or Equal: Test where A is less than or equal to B.
        32b00001100000000001110000000011111,//35. CMPLE Greater Than: Test where A is greater than B to ensure the result is false.
        32b00000000000000000000000000000000,//36. Load value in address 0
        32b00000000000000000000000000000000,//37. Store value in address 0
        32b00000000000000000000000000000000//38. Load empty address
    
    }
    const ALUFN = {6b0000000,//1.ADD
        6b000000,//2.ADD
        6b000000,//3.ADD
        6b000000,//4.ADD
        6b000001,//5.SUB
        6b000001,//6.SUB
        6b000001,//7.SUB
        6b000001,//8.SUB
        6b000010,//9.MUL
        6b000010,//10.MUL
        6b000010,//11.MUL
        6b011000,//12.AND
        6b011000,//13.AND
        6b011000,//14.AND
        6b011000,//15.AND
        6b011110,//16.OR
        6b011110,//17.OR
        6b011110,//18.OR
        6b010110,//19.XOR
        6b010110,//20.XOR
        6b010110,//21.XOR
        6b011010,//22.LOAD
        6b100000,//23.SHL
        6b100000,//24.SHL
        6b100000,//25.SHL
        6b100001,//26.SHR
        6b100001,//27.SHR
        6b100001,//28.SHR
        6b100011,//29.SRA
        6b110011,//30.CMPEQ
        6b110011,//30.CMPEQ
        6b110101,//31.CMPLT
        6b110101,//32.CMPLT
        6b110111,//33.CMPLE
        6b110111,//34.CMPLE
        6b011011,//LD
        6b011001,//ST
        6b011011//LD
    }
    const ANS = {
        32b00000000000000000000000000010001,//1.
        32b00000000000000000000000000100010,//2.
        32b10000000000000000000000000000000,//3.
        32b11111111111111111111111111111110,//4.
        32b00000000000000000001000100010001,//4
        32b00000000000000000000000000000000,//5
        32b00000000000000000000000000000001,//6
        32b10000000000000000000000000000001,//7
        32b00000000000000000000000000000000,//8
        32b00000000000000000000001010010101,//9
        32b00000000000001101010101010111001,//10
        32b00000000000000000000001010010101,//11
        32b00000000000000000000000000000000,//12
        32b00010001000100000000001010010101,//13
        32b00000000000000000000000000000000,//14
        32b00010001000100000000001010010101,//15
        32b11111111111111111111111111111111,//17
        32b00010001000100000000001010010101,//18
        32b00010001000100010001000100010001,//19 -    1111111
        32b00000000000000000000000000000000,//20
        32b11111111111111111111111111111111,//21
        32b00010001000100010001000100010001,//22
        32b00010000000000010000000000010001,//23
        32b10000000000000000000000000000000,//24
        32b10000000000000000000000000000000,//25
        32b10010000000000010000000000010001,//26
        32b00000000000000000000000000000001,//27
        32b00000000000000000000000100100000,//28
        32b11111111111111111111111111111111,//29
        32b00000000000000000000000000000001,//30
        32b00000000000000000000000000000000,//31
        32b00000000000000000000000000000001,//32
        32b00000000000000000000000000000000,//33
        32b00000000000000000000000000000001,//34
        32b00000000000000000000000000000000, //35
        32b00100010001000100010001000100010,//36
        32b00100010001000100010001000100010,//37
        32b00000000000000000000000000000000//38
    

    }
    always {
        a = A[test_case]
        b = B[test_case]
        alufn = ALUFN[test_case]
        ans =ANS[test_case]
    }
}