module alu_manual_tester
(
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output led[8],
    output io_segment[8],
    output io_select[4]
) {
    
    enum States {
        TEST,
        TEST_OUTPUT,
        FIRST16,
        SECOND16,
        THIRD16,
        FORTH16,
        ALUFN,
        OUTPUT1,
        OUTPUT2
        
    }
    const CLK_FREQ = $is_sim() ? 1000 : 100000000 // put 1000 only for sim, 10M on hardware
    .clk(clk){
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))

        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
    .rst(rst){
      multi_seven_seg seg(#DIV(4)) 

            multi_seven_seg_ALUFN seg_ALUFN(#DIV(4)) 
            dff states[$width(States)](#INIT(States.FIRST16))
            dff first32[32]
            dff second32[32]
            dff test_case[8]
            dff alufn[6]
            dff seg_mode (#INIT(1b0))
            dff selector[3](#INIT(3b000))
            dff counter[32]
            dff slow_counter[7]
            dff slow_pointer[$clog2(32)](#INIT(24))

            
    }
  }
    alu alu(.clk(clk))
    alufn_to_dec alufn_to_dec
    test_cases test_cases
    
    bin_to_hex decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    const ALUFN_CODE = {
        32b0000001010001001, //ST 
        32b0000000000110001, //LD
        32b0000010100010001,//ADD
        32b0000001000110100,//SUB
        32b1001011100110110,//MUL
        32b0000010101110001,//AND
        32b0000000010001001,//OR
        32b0000000010001010,//XOR
        32b0000000000000101,//A
        32b0000001010110110,//SHL
        32b0000001010111001,//SHR
        32b0000001010010101,//SRA
        32b0000110011011110,//CMPE
        32b0000110011010110,//CMPL
        32b0000110011011111//CMPLT
    }
    
    always {
        io_led = 3x{{8h0}}
        led = 8b0
        //alu inputs
        alufn_to_dec.value = io_dip[2][5:0]
        alufn.d = io_dip[2][5:0]
        alu.alufn =alufn.q
        
        io_led[2][0] = alu.z //adder output
        io_led[2][1] = alu.v
        io_led[2][2] = alu.n
        
        if (io_dip[2][7]){ //added for error testing
            alu.a = ~first32.q
        }else{alu.a = first32.q
        }
        alu.b = second32.q
                
        slow_pointer.d =slow_pointer.q
        test_cases.test_case =test_case.q
        
        
        seg_mode.d = 0
        
        
        // condition the buttons, then take rising edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        // display 7 seg, changes what input to display depending on state
        case (selector.q){
            3b000:
                decimal_renderer.value = first32.q[31:16]
            3b001:
                decimal_renderer.value = first32.q[15:0]
            3b010:
                decimal_renderer.value = second32.q[31:16]
            3b011:
                decimal_renderer.value = second32.q[15:0]
            3b100:
                 decimal_renderer.value = alu.out[31:16]
            3b101:
                 decimal_renderer.value = alu.out[15:0]
            3b110:
                 decimal_renderer.value = ALUFN_CODE[alufn_to_dec.out] // convert ALUFN code to decimal address
            default:
                decimal_renderer.value = first32.q[31:16]
        }
        
        
        
        
        seg_ALUFN.values = decimal_renderer.digits
        seg.values = decimal_renderer.digits 
        // swtich between hexdecimal and ALUFN Letters
        case (seg_mode.q){
        1b1:
        io_segment = ~seg_ALUFN.seg
        io_select = ~seg_ALUFN.sel 
        1b0:
        io_segment = ~seg.seg
        io_select = ~seg.sel 
        default:
        io_segment = ~seg.seg
        io_select = ~seg.sel 
                
        }
        //STATES
        case(states.q){
             States.OUTPUT1:
                selector.d= 3b100
                led[4] = 1//indicate current state
            if (io_button_edge.out[1]){         
            states.d = States.OUTPUT2
          }   
            if (io_button_edge.out[4]){         
            states.d = States.FIRST16
          }   
            States.OUTPUT2:
                selector.d= 3b101
                led[5] = 1 //indicate current state
            if (io_button_edge.out[1]){         
            states.d = States.OUTPUT1
          } 
            if (io_button_edge.out[4]){         
            states.d = States.FIRST16
          }   
            States.FIRST16: // Keying in First 16 bit
                first32.d[31:16] = c{io_dip[1],io_dip[0]}
                selector.d= 3b000
                led[0] = 1
              
            if (io_button_edge.out[1]){
                states.d = States.SECOND16
                }
            if (io_button_edge.out[3]){
                states.d = States.TEST
                }
            
            States.SECOND16:// Keying in Second 16 bit
                first32.d[15:0] = c{io_dip[1],io_dip[0]}
                selector.d= 3b001
                led[1] = 1
            if (io_button_edge.out[1]){
            states.d = States.THIRD16
                }
            States.THIRD16:// Keying in Third 16 bit
                second32.d[31:16] = c{io_dip[1],io_dip[0]}
                selector.d= 3b010
                led[2] = 1
       
            if (io_button_edge.out[1]){
            states.d = States.FORTH16
                }
            States.FORTH16:// Keying in Forth 16 bit
                second32.d[15:0] = c{io_dip[1],io_dip[0]}
                selector.d= 3b011
                led[3] = 1

            if (io_button_edge.out[1]){
            states.d = States.ALUFN
                }
           States.ALUFN: // Keying in ALUFN code 
            
            
            selector.d = 3b110
            seg_mode.d = 1
            led[4] = 1
            if (io_button_edge.out[1]){
            states.d = States.OUTPUT1
          }  
           States.TEST: // cycle through on timer and input Alu.a and Alu.b using test case rom
            counter.d = counter.q +1
           led[5] = 1
                alufn.d = test_cases.alufn
                alufn_to_dec.value = test_cases.alufn
            if (io_button_edge.out[0]){ // speed up timer
                if (slow_pointer.q>0){
                    slow_pointer.d = slow_pointer.q -1
                    }}    
                
           if (io_button_edge.out[2]){ // speed down timer
               if (slow_pointer.q<31){
                   slow_pointer.d = slow_pointer.q +1
                    }}    
                               
            if (counter.q[slow_pointer.q]){ // simple pointer based timer
                    slow_counter.d = slow_counter.q +1
                    counter.d = 0
                }
            if (slow_counter.q ==1 ){
                first32.d[31:16] = test_cases.a[31:16]
                selector.d= 3b000
           
                        }
            else if(slow_counter.q ==2){
                first32.d[15:0] = test_cases.a[15:0]       
                selector.d= 3b01
     
                        }
             else if(slow_counter.q ==3){
                second32.d[31:16] = test_cases.b[31:16]
                selector.d= 3b010 

                        }
             else if(slow_counter.q ==4){
                second32.d[15:0] =  test_cases.b[15:0]  
                selector.d= 3b011

                        }
             else if(slow_counter.q ==5){
                
                selector.d = 3b110
                seg_mode.d = 1 
                
                        }
             else if(slow_counter.q ==6){ 
            states.d = States.TEST_OUTPUT
                    slow_counter.d = 0
                    counter.d = 0
                } 
            
             States.TEST_OUTPUT: // display out of test case
                alufn.d = test_cases.alufn
                counter.d = counter.q +1
                led[6] = 1
                io_led[0]= 8x{(alu.out == test_cases.ans )} // light up if correct
                seg_mode.d = 0
            if (counter.q[slow_pointer.q]){ // simple pointer based timer
                    slow_counter.d = slow_counter.q +1
                    counter.d = 0
                }
                if (slow_counter.q ==0 ){
                  selector.d= 3b100

                        }
                else if(slow_counter.q ==1){
                selector.d= 3b101

                        }
            else if(slow_counter.q ==2){
                    
            slow_counter.d = 0
            counter.d = 0
            test_case.d = test_case.q + 1
            if (test_case.q>36){
                states.d = States.FIRST16
                    }else{
                        states.d = States.TEST
                    }
                        
                        }

                           
             
        }}

    }
