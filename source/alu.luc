module alu (
    input a[32],
    input b[32],
    input alufn[6],

    output out[32],
    output z,
    output v,
    output n
) 
{
    
    multiplier multiplier
    adder adder(#SIZE(32))
    compare compare
    shifter shifter
    bool boolean(#SIZE(32))

    always {
        
        z=adder.z
            n = adder.n
            v = adder.v
            out= 0
        // implement alu logic here
        adder.a = a
        adder.b = b
        adder.alufn = alufn
        
        multiplier.a =a
        multiplier.b = b
        

        
        boolean.a =a 
        boolean.b = b
        boolean.alufn = alufn
        
        shifter.a =a
        shifter.b = b[4:0]
        shifter.alufn =alufn
        
        compare.z=adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn
        
        case(alufn[5:4]){
            
            2b00: 
            case(alufn[1:0]){
            2b00:
            out= adder.out
            
            2b10:
            out = multiplier.mul
            2b11: 
            out = a/2
                }
            
            
            2b01:
            if (alufn == b011011){
            out = b
                }else{
                out =boolean.bool    
                }
            
                

            2b10:
            out = shifter.shift
            2b11:
            out = compare.cmp
            
            
        }
         
            
        
          
    }
}