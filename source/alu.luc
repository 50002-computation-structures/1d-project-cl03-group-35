module alu (
    input a[32],
    input b[32],
    input alufn[6],
    input clk,
    output out[32],
    output z,
    output v,
    output n
) 
{
    
    multiplier multiplier
    adder adder(#SIZE(32))
    compare compare
    shifter shifter
    bool boolean(#SIZE(32))
    simple_ram reg(.clk(clk))
    always {
        
        z=adder.z
            n = adder.n
            v = adder.v
            out= 0
        // implement alu logic here
        adder.a = a
        adder.b = b
        adder.alufn = alufn
        
        multiplier.a =a
        multiplier.b = b
        
        reg.address= b[4:0]
        reg.write_data = a
        reg.write_enable=0
        
        boolean.a =a 
        boolean.b = b
        boolean.alufn = alufn
        
        shifter.a =a
        shifter.b = b[4:0]
        shifter.alufn =alufn
        
        compare.z=adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn
        
        case(alufn[5:4]){
            
            2b00: 
            case(alufn[1]){
            1b0:
            out= adder.out
            
            1b1:
            out = multiplier.mul
                }
            
            
            2b01:
                case(alufn[0]){
            1b0:
            out =boolean.bool
            1b1:
            reg.write_enable = ~alufn[1]
            out= reg.read_data
                }
            
           
            2b10:
            out = shifter.shift
            2b11:
            out = compare.cmp
            
            
        }
         
            
        
          
    }
}