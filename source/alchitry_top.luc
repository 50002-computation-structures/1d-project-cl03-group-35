module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input row[4],
    output col[4],
    input io_button[2],
    output led_grid[16],

    output io_segment[7],
    output seg_selector[4]
) {

    sig rst                 // reset signal
   
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond

      
        edge_detector io_button_edge_row[4](#RISE(4x{{1}}), #FALL(4x{{0}}))
        button_conditioner_matrix io_button_cond_row[4](#CLK_FREQ(4x{{10000000}})) 
        
        edge_detector io_button_edge_start[1](#RISE({1}), #FALL({0}))
        button_conditioner io_button_cond_start[1](#CLK_FREQ({10000000}),#MIN_DELAY({100})) 
        
        edge_detector io_button_edge_select[1](#RISE({1}), #FALL({0}))
        button_conditioner io_button_cond_select[1](#CLK_FREQ({10000000}),#MIN_DELAY({100})) 
        
        manual_tester cpu(.rst(rst))
        
        
    }

    
    
    
    always {
        
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        usb_tx = usb_rx
        io_button_cond_row.in = row
        io_button_edge_row.in = io_button_cond_row.out
        io_button_cond_start.in = io_button[0]
        io_button_edge_start.in = io_button_cond_start.out
        io_button_cond_select.in = io_button[1]
        io_button_edge_select.in = io_button_cond_select.out
        cpu.row = io_button_edge_row.out
        cpu.start_button =io_button_edge_start.out
        cpu.select_button =io_button_edge_select.out
        col = cpu.col
        led_grid = cpu.led_grid
        
        seg_selector = cpu.seg_selector
        io_segment = cpu.io_segment
        
        }
    }
