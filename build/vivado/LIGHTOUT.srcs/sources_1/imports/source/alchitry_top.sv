/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        input wire usb_rx,
        output reg usb_tx,
        input wire [3:0] row,
        output reg [3:0] col,
        input wire [1:0] io_button,
        output reg [15:0] led_grid,
        output reg [7:0] io_led,
        output reg [6:0] io_segment,
        output reg [3:0] seg_selector
    );
    logic rst;
    localparam _MP_STAGES_99609384 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_99609384)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [3:0][0:0] _MP_RISE_1226946597 = {{1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [3:0][0:0] _MP_FALL_1226946597 = {{1'h0, 1'h0, 1'h0, 1'h0}};
    logic [3:0] M_io_button_edge_row_in;
    logic [3:0] M_io_button_edge_row_out;
    
    genvar idx_0_1226946597;
    
    generate
        for (idx_0_1226946597 = 0; idx_0_1226946597 < 4; idx_0_1226946597 = idx_0_1226946597 + 1) begin: forLoop_idx_0_1226946597
            edge_detector #(
                .RISE(_MP_RISE_1226946597[idx_0_1226946597]),
                .FALL(_MP_FALL_1226946597[idx_0_1226946597])
            ) io_button_edge_row (
                .clk(clk),
                .in(M_io_button_edge_row_in[idx_0_1226946597]),
                .out(M_io_button_edge_row_out[idx_0_1226946597])
            );
        end
    endgenerate
    
    
    localparam logic [3:0][23:0] _MP_CLK_FREQ_925489245 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_925489245 = 5'h1e;
    localparam _MP_NUM_SYNC_925489245 = 2'h2;
    logic [3:0] M_io_button_cond_row_in;
    logic [3:0] M_io_button_cond_row_out;
    
    genvar idx_0_925489245;
    
    generate
        for (idx_0_925489245 = 0; idx_0_925489245 < 4; idx_0_925489245 = idx_0_925489245 + 1) begin: forLoop_idx_0_925489245
            button_conditioner_matrix #(
                .CLK_FREQ(_MP_CLK_FREQ_925489245[idx_0_925489245]),
                .MIN_DELAY(_MP_MIN_DELAY_925489245),
                .NUM_SYNC(_MP_NUM_SYNC_925489245)
            ) io_button_cond_row (
                .clk(clk),
                .in(M_io_button_cond_row_in[idx_0_925489245]),
                .out(M_io_button_cond_row_out[idx_0_925489245])
            );
        end
    endgenerate
    
    
    localparam logic [0:0][0:0] _MP_RISE_824675833 = {{1'h1}};
    localparam logic [0:0][0:0] _MP_FALL_824675833 = {{1'h0}};
    logic [0:0] M_io_button_edge_start_in;
    logic [0:0] M_io_button_edge_start_out;
    
    genvar idx_0_824675833;
    
    generate
        for (idx_0_824675833 = 0; idx_0_824675833 < 1; idx_0_824675833 = idx_0_824675833 + 1) begin: forLoop_idx_0_824675833
            edge_detector #(
                .RISE(_MP_RISE_824675833[idx_0_824675833]),
                .FALL(_MP_FALL_824675833[idx_0_824675833])
            ) io_button_edge_start (
                .clk(clk),
                .in(M_io_button_edge_start_in[idx_0_824675833]),
                .out(M_io_button_edge_start_out[idx_0_824675833])
            );
        end
    endgenerate
    
    
    localparam logic [0:0][23:0] _MP_CLK_FREQ_1491760460 = {{24'h989680}};
    localparam _MP_MIN_DELAY_1491760460 = 5'h14;
    localparam _MP_NUM_SYNC_1491760460 = 2'h2;
    logic [0:0] M_io_button_cond_start_in;
    logic [0:0] M_io_button_cond_start_out;
    
    genvar idx_0_1491760460;
    
    generate
        for (idx_0_1491760460 = 0; idx_0_1491760460 < 1; idx_0_1491760460 = idx_0_1491760460 + 1) begin: forLoop_idx_0_1491760460
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1491760460[idx_0_1491760460]),
                .MIN_DELAY(_MP_MIN_DELAY_1491760460),
                .NUM_SYNC(_MP_NUM_SYNC_1491760460)
            ) io_button_cond_start (
                .clk(clk),
                .in(M_io_button_cond_start_in[idx_0_1491760460]),
                .out(M_io_button_cond_start_out[idx_0_1491760460])
            );
        end
    endgenerate
    
    
    localparam logic [0:0][0:0] _MP_RISE_1399609076 = {{1'h1}};
    localparam logic [0:0][0:0] _MP_FALL_1399609076 = {{1'h0}};
    logic [0:0] M_io_button_edge_select_in;
    logic [0:0] M_io_button_edge_select_out;
    
    genvar idx_0_1399609076;
    
    generate
        for (idx_0_1399609076 = 0; idx_0_1399609076 < 1; idx_0_1399609076 = idx_0_1399609076 + 1) begin: forLoop_idx_0_1399609076
            edge_detector #(
                .RISE(_MP_RISE_1399609076[idx_0_1399609076]),
                .FALL(_MP_FALL_1399609076[idx_0_1399609076])
            ) io_button_edge_select (
                .clk(clk),
                .in(M_io_button_edge_select_in[idx_0_1399609076]),
                .out(M_io_button_edge_select_out[idx_0_1399609076])
            );
        end
    endgenerate
    
    
    localparam logic [0:0][23:0] _MP_CLK_FREQ_670295104 = {{24'h989680}};
    localparam _MP_MIN_DELAY_670295104 = 5'h14;
    localparam _MP_NUM_SYNC_670295104 = 2'h2;
    logic [0:0] M_io_button_cond_select_in;
    logic [0:0] M_io_button_cond_select_out;
    
    genvar idx_0_670295104;
    
    generate
        for (idx_0_670295104 = 0; idx_0_670295104 < 1; idx_0_670295104 = idx_0_670295104 + 1) begin: forLoop_idx_0_670295104
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_670295104[idx_0_670295104]),
                .MIN_DELAY(_MP_MIN_DELAY_670295104),
                .NUM_SYNC(_MP_NUM_SYNC_670295104)
            ) io_button_cond_select (
                .clk(clk),
                .in(M_io_button_cond_select_in[idx_0_670295104]),
                .out(M_io_button_cond_select_out[idx_0_670295104])
            );
        end
    endgenerate
    
    
    logic [0:0] M_cpu_select_button;
    logic [0:0] M_cpu_start_button;
    logic [3:0] M_cpu_row;
    logic [3:0] M_cpu_col;
    logic [15:0] M_cpu_led_grid;
    logic [15:0] M_cpu_ledout;
    logic [6:0] M_cpu_io_segment;
    logic [3:0] M_cpu_seg_selector;
    
    manual_tester cpu (
        .rst(rst),
        .clk(clk),
        .select_button(M_cpu_select_button),
        .start_button(M_cpu_start_button),
        .row(M_cpu_row),
        .col(M_cpu_col),
        .led_grid(M_cpu_led_grid),
        .ledout(M_cpu_ledout),
        .io_segment(M_cpu_io_segment),
        .seg_selector(M_cpu_seg_selector)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        M_io_button_cond_row_in = row;
        M_io_button_edge_row_in = M_io_button_cond_row_out;
        M_io_button_cond_start_in = io_button[1'h0];
        M_io_button_edge_start_in = M_io_button_cond_start_out;
        M_io_button_cond_select_in = io_button[1'h1];
        M_io_button_edge_select_in = M_io_button_cond_select_out;
        M_cpu_row = M_io_button_edge_row_out;
        M_cpu_start_button = M_io_button_edge_start_out;
        M_cpu_select_button = M_io_button_edge_select_out;
        col = M_cpu_col;
        led_grid = M_cpu_led_grid;
        io_led = M_cpu_ledout;
        seg_selector = M_cpu_seg_selector;
        io_segment = M_cpu_io_segment;
    end
    
    
endmodule