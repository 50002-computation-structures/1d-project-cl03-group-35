/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module carry_skip_adder_32 (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire cin,
        output reg [31:0] s,
        output reg cout32
    );
    logic [31:0] R_0806bff7_i;
    logic [31:0] RR_0806bff7_i;
    logic [7:0][3:0] M_csa_4bit_a;
    logic [7:0][3:0] M_csa_4bit_b;
    logic [7:0] M_csa_4bit_ci;
    logic [7:0][3:0] M_csa_4bit_s;
    logic [7:0] M_csa_4bit_cout;
    
    genvar idx_0_1503319608;
    
    generate
        for (idx_0_1503319608 = 0; idx_0_1503319608 < 8; idx_0_1503319608 = idx_0_1503319608 + 1) begin: forLoop_idx_0_1503319608
            carry_skip_adder_4bit csa_4bit (
                .a(M_csa_4bit_a[idx_0_1503319608]),
                .b(M_csa_4bit_b[idx_0_1503319608]),
                .ci(M_csa_4bit_ci[idx_0_1503319608]),
                .s(M_csa_4bit_s[idx_0_1503319608]),
                .cout(M_csa_4bit_cout[idx_0_1503319608])
            );
        end
    endgenerate
    
    
    always @* begin
        M_csa_4bit_a = {a[5'h1f:5'h1c], a[5'h1b:5'h18], a[5'h17:5'h14], a[5'h13:5'h10], a[4'hf:4'hc], a[4'hb:4'h8], a[3'h7:3'h4], a[2'h3:1'h0]};
        M_csa_4bit_b = {b[5'h1f:5'h1c], b[5'h1b:5'h18], b[5'h17:5'h14], b[5'h13:5'h10], b[4'hf:4'hc], b[4'hb:4'h8], b[3'h7:3'h4], b[2'h3:1'h0]};
        s = {M_csa_4bit_s[3'h7], M_csa_4bit_s[3'h6], M_csa_4bit_s[3'h5], M_csa_4bit_s[3'h4], M_csa_4bit_s[2'h3], M_csa_4bit_s[2'h2], M_csa_4bit_s[1'h1], M_csa_4bit_s[1'h0]};
        cout32 = M_csa_4bit_cout[3'h7];
        for (RR_0806bff7_i = 0; RR_0806bff7_i < 4'h8; RR_0806bff7_i = RR_0806bff7_i + 1) begin
      R_0806bff7_i = (0) + RR_0806bff7_i * (1);
            if (R_0806bff7_i == 1'h0) begin
                M_csa_4bit_ci[1'h0] = cin;
            end else begin
                M_csa_4bit_ci[R_0806bff7_i] = M_csa_4bit_cout[R_0806bff7_i - 1'h1];
            end
        end
    end
    
    
endmodule