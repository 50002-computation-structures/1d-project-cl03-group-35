/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module csa (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire cin,
        output reg [31:0] s,
        output reg cout
    );
    logic [31:0] R_16c23089_i;
    logic [31:0] RR_16c23089_i;
    logic [7:0][3:0] M_csa_4_a;
    logic [7:0][3:0] M_csa_4_b;
    logic [7:0] M_csa_4_ci;
    logic [7:0][3:0] M_csa_4_s;
    logic [7:0] M_csa_4_cout;
    
    genvar idx_0_1485961499;
    
    generate
        for (idx_0_1485961499 = 0; idx_0_1485961499 < 8; idx_0_1485961499 = idx_0_1485961499 + 1) begin: forLoop_idx_0_1485961499
            carry_skip_adder_4bit csa_4 (
                .a(M_csa_4_a[idx_0_1485961499]),
                .b(M_csa_4_b[idx_0_1485961499]),
                .ci(M_csa_4_ci[idx_0_1485961499]),
                .s(M_csa_4_s[idx_0_1485961499]),
                .cout(M_csa_4_cout[idx_0_1485961499])
            );
        end
    endgenerate
    
    
    always @* begin
        s = M_csa_4_s;
        for (RR_16c23089_i = 0; RR_16c23089_i < 4'h8; RR_16c23089_i = RR_16c23089_i + 1) begin
      R_16c23089_i = (0) + RR_16c23089_i * (1);
            M_csa_4_a[R_16c23089_i] = a[2'h3 + 3'h4 * R_16c23089_i:1'h0 + 3'h4 * R_16c23089_i];
            M_csa_4_b[R_16c23089_i] = b[2'h3 + 3'h4 * R_16c23089_i:1'h0 + 3'h4 * R_16c23089_i];
            cout = M_csa_4_cout[3'h7];
            if (R_16c23089_i == 1'h0) begin
                M_csa_4_ci[1'h0] = cin;
            end else begin
                M_csa_4_ci[R_16c23089_i] = M_csa_4_cout[R_16c23089_i - 1'h1];
            end
        end
    end
    
    
endmodule